//---------------------------------------------------------------------------

#ifndef SQLiteDatabaseH
#define SQLiteDatabaseH
//---------------------------------------------------------------------------
#include "SQLite3Lib.h"
// #include "sqlite3.h"
// #include "TMemoryStream.h"
#include <string>
#include <exception>
#include <vector>
#ifdef WIN32
	#include "windows.h"
#endif
#include <System.Classes.hpp>
//---------------------------------------------------------------------------

//typedef int TTipoColuna;

enum TTipoColuna {
	SQLITE_INTEGER = 1, SQLITE_FLOAT = 2, SQLITE_TEXT = 3, SQLITE_BLOB = 4,
	SQLITE_NULL = 5
};

struct TSQLiteParametro {
	TTipoColuna tipo;

	std::string nome;
	__int64 integerValor;
	double doubleValor;
	std::string stringValor;
	TMemoryStream *blobValor;
	bool nuloValor;
};

typedef void THookQuery(std::string);

typedef int TSQLiteBusyHandlerCallback(void *UserData, int P2);

typedef int TCollateXCompare(void *UserData, int Buf1Len, const void *Buf1,
	int Buf2Len, const void *Buf2);

class TSQLiteTable;
class TSQLiteUniTable;

class TSQLiteDatabase {
private: // User declarations
	bool bEmTransacao;
	bool bSincronizado;
	THookQuery *OnQuery;

	std::vector<TSQLiteParametro> *listaParametros;
	std::string SQLiteErrorStr(int nSQLiteErrorCode);
protected:
public: // User declarations

	sqlite3 *dbHandle;

	TSQLiteDatabase(const std::string sBanco);
	~TSQLiteDatabase();
	void BindData(sqlite3_stmt *stmt, const TSQLiteParametro bindings[]);
	void RaiseError(std::string sMensagem, std::string sSQL);
	void BeginTransaction();
	void Commit();
	void Rollback();
	void AddParamInt(std::string nome, __int64 valor);
	void AddParamFloat(std::string nome, double valor);
	void AddParamText(std::string nome, std::string valor);
	void AddParamNull(std::string nome);
	void SetParams(sqlite3_stmt *stmt);
	void ParamsClear();
	void ExecSQL(const std::string sSQL);
	TSQLiteTable* GetTable(const std::string sSQL);
	void UpdateBlob(const std::string sSQL, TStream *BlobData);
	int RowsChanged();

	TSQLiteTable* GetTable(const std::string sSQL,
		const TSQLiteParametro bindings[]);
	void ExecSQL(const std::string sSQL, const TSQLiteParametro bindings[]);
	void ExecSQL(TSQLiteQuery query);
	TSQLiteQuery PrepareSQL(const std::string sSQL);
	void BindSQL(TSQLiteQuery query, const int Index, const int Value);
	void BindSQL(TSQLiteQuery query, const int Index, const std::string Value);
	void ReleaseSQL(TSQLiteQuery query);
	TSQLiteUniTable* GetUniTable(const std::string sSQL);
	TSQLiteUniTable* GetUniTable(const std::string sSQL,
		const TSQLiteParametro bindings[]);
	__int64 GetTableValue(const std::string sSQL);
	__int64 GetTableValue(const std::string sSQL,
		const TSQLiteParametro bindings[]);
	std::string GetTableString(const std::string sSQL);
	std::string GetTableString(const std::string sSQL,
		const TSQLiteParametro bindings[]);
	void GetTableStringVetor(const std::string sSQL,
		std::vector<std::string> *Value);
	bool TableExists(std::string TableName);
	__int64 GetLastInsertRowID();
	__int64 GetLastChangedRows();
	void SetTimeout(int value);
	int Backup(TSQLiteDatabase *TargetDB);
	int Backup(TSQLiteDatabase *TargetDB, std::string targetName,
		std::string sourceName);
	std::string Version();
	void AddCustomCollate(std::string name, TCollateXCompare xCompare);
	// adds collate named SYSTEM for correct data sorting by user's locale
	void AddSystemCollate();

	bool IsTransactionOpen();
	// database rows that were changed (or inserted or deleted) by the most recent SQL statement
	bool GetSynchronised();
	void SetSynchronised(bool value);
	void SetOnQuery(THookQuery* query);
	void DoQuery(std::string value);
};

//---------------------------------------------------------------------------
#endif
